{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,SAAMA,SAAS,CAAC,aAAD,CAAf;AACA,OAAIC,aAAa,IAAjB;AACA,OAAIC,QAAQ,IAAZ;;OAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC9BC,kBAAc;AACb,WAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACA;;AAED,WAAOC,aAAP,GAAuB;AACtB,YAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAIR,UAAJ,EAAgB;AACf,cAAOO,QAAQP,UAAR,CAAP;AACA;;AAED,YAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,kBAAYG,eAAZ,GAA+BC,CAAD,IAAO;AACpCX,yBAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACA,OAFD;;AAIAP,kBAAYQ,SAAZ,GAAyBJ,CAAD,IAAO;AAC9Bb,oBAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,eAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,kBAAWC,KAAX,GAAmB,MAAM;AACxB,cAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACA,QAFD;AAGAG,eAAQM,EAAEE,MAAF,CAASC,MAAjB;AACA,OAPD;;AASAP,kBAAYU,OAAZ,GAAuBN,CAAD,IAAO;AAC5BO,eAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,cAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,OAHD;AAIA,MAxBM,CAAP;AAyBA;;AAED,WAAOT,aAAP,CAAqBd,UAArB,EAAiC;AAChCD,YAAOyB,OAAP,CAAgBC,KAAD,IAAW;AACzB,UAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAChDzB,kBAAW4B,iBAAX,CAA6BH,KAA7B;AACA;;AAEDzB,iBAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACA,MAND;AAOA;;AAED,WAAOC,eAAP,GAAyB;AACxB,SAAG/B,UAAH,EAAe;AACdC;AACA;AACD;AA/C6B,I","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\tconstructor() {\n\t\tthrow new Error(\"Não é possível criar instâncias dessa classe\");\n\t}\n\n\tstatic getConnection() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (connection) {\n\t\t\t\treturn resolve(connection);\n\t\t\t}\n\n\t\t\tconst openRequest = indexedDB.open(\"jscangaceiro\", 2);\n\n\t\t\topenRequest.onupgradeneeded = (e) => {\n\t\t\t\tConnectionFactory._createStores(e.target.result);\n\t\t\t};\n\n\t\t\topenRequest.onsuccess = (e) => {\n\t\t\t\tconnection = e.target.result;\n\t\t\t\tclose = connection.close.bind(connection);\n\t\t\t\tconnection.close = () => {\n\t\t\t\t\tthrow new Error(\"Você não pode fechar diretamente a conexão\")\n\t\t\t\t};\n\t\t\t\tresolve(e.target.result);\n\t\t\t};\n\n\t\t\topenRequest.onerror = (e) => {\n\t\t\t\tconsole.log(e.target.error);\n\t\t\t\treject(e.target.error.name);\n\t\t\t};\n\t\t});\n\t}\n\n\tstatic _createStores(connection) {\n\t\tstores.forEach((store) => {\n\t\t\tif (connection.objectStoreNames.contains(store)) {\n\t\t\t\tconnection.deleteObjectStore(store);\n\t\t\t}\n\n\t\t\tconnection.createObjectStore(store, { autoIncrement: true });\n\t\t});\n\t}\n\n\tstatic closeConnection() {\n\t\tif(connection) {\n\t\t\tclose();\n\t\t}\n\t}\n}"]}